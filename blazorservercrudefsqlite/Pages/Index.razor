@page "/"

@inject DbController service

<div class="container">
    <h2>Relations</h2>

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
            <tr>
                <th>Org Id</th>
                <th>User Id</th>
            </tr>
            </thead>
            <tbody>
            @if (Relations.Any())
            {
                @foreach (var product in Relations)
                {
                    <tr>
                        <td>@product.OrgId</td>
                        <td>@product.UserId</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6">
                        <strong>No Relations available</strong>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <h2>Orgs</h2>

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Org Id</th>
                    <th>Name</th>
                    <th>Delete Org</th>
                </tr>
            </thead>
            <tbody>
                @if (Orgs.Any())
                {
                    @foreach (var product in Orgs)
                    {
                        <tr @onclick="() => SetProductForUpdate(product)">
                            <td>@product.Id</td>
                            <td>@product.Name</td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => DeleteProduct(product)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">
                            <strong>No usrs available</strong>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h2>Users</h2>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Org Id</th>
                    <th>Name</th>
                    <th>Orgs Quantity</th>
                    <th>Delete Org</th>
                </tr>
            </thead>
            <tbody>
                @if (Users.Any())
                {
                    @foreach (var user in Users)
                    {
                        <tr @onclick="() => SetUserForUpdate(user)">
                            <td>@user.Id</td>
                            <td>@user.Name</td>
                            @if (user.Relations != null)
                            {
                                <td>@user.Relations.Count</td>
                            }
                            else
                            {
                                <td>Null</td>
                            }
                            <td>
                                <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">
                            <strong>No users available</strong>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Org</div>

            <EditForm Model="@NewOrg">
                <div class="form-group">
                    <label for="name">Org Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@NewOrg.Name" />
                </div>


                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewProduct"> Add Org</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Org</div>

            <EditForm Model="@_updateOrg">
                <div class="form-group">
                    <label for="name">Org Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@_updateOrg.Name" />
                </div>


                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateProductData"> Update Org</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Add Org to User</div>

            <EditForm Model="@_updateUser">
                <div class="form-group">
                    <label for="name">User Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@_updateUser.Name" />
                </div>

                <div class="form-group">
                    <label for="name">Org Name</label>
                    <input type="text" id="orgid" class="form-control" @bind-value="@_updateOrg.Name" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddUserOrgData"> Update Org</button>
                </div>
            </EditForm>
        </div>
    </div>


</div>


@code {
    List<Org> Orgs = new List<Org>();
    List<User> Users = new List<User>();
    List<Relation> Relations = new List<Relation>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();
    }

    private async Task RefreshProducts()
    {
        Orgs = await service.GetOrgsAsync();
        Users = await service.GetUsersAsync();
        Relations = await service.GetRelationsAsync();
    }


    public Org NewOrg { get; set; } = new Org();
    public User NewUser { get; set; } = new User();

    private async Task AddNewProduct()
    {
        await service.AddOrgAsync(NewOrg);
        NewOrg = new Org();
        await RefreshProducts();
    }

    Org _updateOrg = new Org();

    private void SetProductForUpdate(Org org)
    {
        _updateOrg = org;
    }

    private async Task UpdateProductData()
    {
        await service.UpdateOrgAsync(_updateOrg);
        await RefreshProducts();
    }

    private async Task DeleteProduct(Org org)
    {
        await service.DeleteOrgAsync(org);
        await RefreshProducts();
    }

    // ------------------ Users ----------
    private async Task AddNewUser()
    {
        await service.AddUserAsync(NewUser);
        NewUser = new User();
        await RefreshProducts();
    }

    User _updateUser = new User();

    private void SetUserForUpdate(User org)
    {
        _updateUser = org;
    }

    private async Task UpdateUserData()
    {
        await service.UpdateUserAsync(_updateUser);
        await RefreshProducts();
    }

    private async Task AddUserOrgData()
    {
        await service.UpdateUserOrgAsync(_updateUser, _updateOrg);
        await RefreshProducts();
    }

    private async Task DeleteUser(User org)
    {
        await service.DeleteUserAsync(org);
        await RefreshProducts();
    }

}